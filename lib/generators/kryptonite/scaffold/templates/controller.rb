# Scaffolding generated by Kryptonite <%= kryptonite_get_full_version_string %>

module Kryptonite
  class <%= class_name.pluralize %>Controller < Kryptonite::KryptoniteController
  
    ## optional filters for defining usage according to Kryptonite::Users access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @kryptonite_page_title = t("kryptonite.<%= plural_name %>.plural_name_cap")
  		@<%= plural_name %> = <%= class_name %>.paginate :page => params[:page]
    end
  
    def show
      @kryptonite_page_title = t("scaffold.view", :model=>t("kryptonite.<%= plural_name %>.singular_name_down"))
      @<%= singular_name %> = <%= class_name %>.find params[:id]
    end
 
    def new
      @kryptonite_page_title = t("scaffold.add_new", :model=>t("kryptonite.<%= plural_name %>.singular_name_down"))
    	@<%= singular_name %> = <%= class_name %>.new
    end

    def create
      @<%= singular_name %> = <%= class_name %>.new params[:<%= singular_name %>]
      
      respond_to do |format|
          if @<%= singular_name %>.save
            format.html { 
              flash[:notice] = t("scaffold.created", :model=>t("kryptonite.<%= plural_name %>.singular_name_cap"))
              redirect_to kryptonite_<%= @plural_route %>_path
            }
            format.json { respond_with_bip(@<%= singular_name %>) }
          else
            format.html { 
              flash.now[:warning] = t("scaffold.problems_creating", :model=>t("kryptonite.<%= plural_name %>.singular_name_down"))
              render :action => :new
            }
            format.json { respond_with_bip(@<%= singular_name %>) }
          end
      end
    end
  
    def update
      @kryptonite_page_title = t("scaffold.update", :model=>t("kryptonite.<%= plural_name %>.singular_name_down"))
      
      @<%= singular_name %> = <%= class_name %>.find params[:id]
    
      respond_to do |format|
          if @<%= singular_name %>.update_attributes params[:<%= singular_name %>]
            format.html { 
              flash[:notice] = t("scaffold.updated", :model=>t("kryptonite.<%= plural_name %>.singular_name_cap"))
              redirect_to kryptonite_<%= @plural_route %>_path
            }
            format.json { respond_with_bip(@<%= singular_name %>) }
          else
            format.html { 
              flash.now[:warning] = t("scaffold.problems_updating", :model=>t("kryptonite.<%= plural_name %>.singular_name_down"))
              render :action => :show
            }
            format.json { respond_with_bip(@<%= singular_name %>) }
          end
      end
    end
 
    def destroy
      @<%= singular_name %> = <%= class_name %>.find params[:id]

      @<%= singular_name %>.destroy
      flash[:notice] = t("scaffold.deleted", :model=>t("kryptonite.<%= plural_name %>.singular_name_cap"))
      redirect_to kryptonite_<%= @plural_route %>_path
    end
  
  end
end